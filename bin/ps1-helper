#!/bin/bash
# populate ps1 content asynchronously.
set -euo pipefail

(
  # Lock file path
  lockfile=~/.ps1-output-cache.lock

  # Check if another instance of the script is running
  if [ -e "$lockfile" ]; then
    # Check if the lock is stale (older than 5 minutes) - macOS compatible
    lock_time=$(stat -f %m "$lockfile")
    current_time=$(date +%s)
    if [ $(( current_time - lock_time )) -gt 300 ]; then
      rm -f "$lockfile"
    else
      exit 1
    fi
  fi

  # Create lock file
  touch "$lockfile"

  # Try to delete the lock file when the script exits, even if there's an error
  trap 'rm -f "$lockfile"' EXIT

  # Create a temporary file for output
  temp_file=$(mktemp)

  # Ensure temp file is removed on exit
  trap 'rm -f "$lockfile" "$temp_file"' EXIT

  # If the script fails, we don't want to update the cache with partial data
  {
    last-git-backup
    # if ps1-helper-local is present and executable, run it:
    if [ -x "${HOME}/bin/ps1-helper-local" ]; then
      ~/bin/ps1-helper-local
    fi
    echo -n "$(date)"

    # crontab count:
    echo -n " cronjobs:$(crontab -l 2>/dev/null | grep -cv '^#|^$')"

    # Check for the existence of bash history backup script in cron jobs
    if ! crontab -l 2>&1 | grep -q 'backup-bash-history'; then
        echo "Warning: bash history backup script is not in crontab"
    fi

    # Only if we get here without errors, update the actual cache file
    mv "$temp_file" ~/.ps1-output-cache
  } > "$temp_file" || {
    # If any command in the block fails, remove the temp file and exit
    rm -f "$temp_file"
    exit 1
  }
) &

# exists but prevents backgrounded subshell from ending.
disown -h

exit 0